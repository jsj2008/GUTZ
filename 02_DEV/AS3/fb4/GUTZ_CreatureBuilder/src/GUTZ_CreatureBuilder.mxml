<?xml version="1.0" encoding="utf-8"?>

<!-- -=[ START OF APPLICATION UI ]=- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" 
					   layoutDirection="ltr" 
					   width="800" height="600" 
					   
					   initialize="uponAppInit(event)"
					   creationComplete="uponAppCreation(event)" 
					   addedToStage="uponStageAdoption(event)">
	<!-- ////////////////////////////////////////////////// -->
	
	
	<!-- -=[ CSS STYLE SHEET ]=- -->
	<fx:Style source="./../assets/styles/default.css" />
	<fx:Script>
		<![CDATA[
			

			


			

		]]>
	</fx:Script>
	
	
	<!-- -=[ FX OBJS ]=- -->
	<fx:Declarations>
		<s:RadioButtonGroup id="rGrpPartTypes" itemClick="hdlPartType_Change(event)">
		</s:RadioButtonGroup>
		
	</fx:Declarations>
	<!-- /////////////////////////////// -->
	
	
	<!-- -=[ MXML SCRIPT ]=- -->
	<fx:Script>
		<![CDATA[
			import cc.gullinbursti.converts.Angle;
			import cc.gullinbursti.lang.Strings;
			import cc.gullinbursti.math.BasicMath;
			import cc.gullinbursti.math.geom.BasicGeom;
			
			import com.sparklemountain.gutz.creaturebuilder.ComponentConsts;
			import com.sparklemountain.gutz.creaturebuilder.CreatureConsts;
			import com.sparklemountain.gutz.creaturebuilder.EditorConsts;
			import com.sparklemountain.gutz.creaturebuilder.PlistConsts;
			
			import com.sparklemountain.gutz.creaturebuilder.model.vo.AbstractPartVO;
			import com.sparklemountain.gutz.creaturebuilder.model.vo.ActionVO;
			import com.sparklemountain.gutz.creaturebuilder.model.vo.CircleVO;
			import com.sparklemountain.gutz.creaturebuilder.model.vo.HistoryVO;
			import com.sparklemountain.gutz.creaturebuilder.model.vo.JointVO;
			
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.events.SliderEvent;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			
			import spark.primitives.Ellipse;
			import spark.primitives.Line;
			//]~=~=~=~=~=~=~=~=~=~=~=~=~=~[]~=~=~=~=~=~=~=~=~=~=~=~=~=~[
			
			
			//] APP PROPERTIES ]>
			//]=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~.
			private var _historyVO:HistoryVO;
			
			private var _supportPart_tot:int;
			private var _visceraPart_tot:int;
			private var _contourPart_tot:int;
			
			
			private var _bodyPartVO_arr:Array;
			private var _clampVO_arr:Array;
			
			private var _bodyUI_arr:Array;
			private var _clampUI_arr:Array;

			private var _plist_str:String;
			//[¡]~=~=~=~=~=~=~=~=~=~=~=~=~=~[!]~=~=~=~=~=~=~=~=~=~=~=~=~=~[¡].
			
			
			
			//* *\[ APP EVENT HANDLERS ]/*
			//*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*\
			
			private function uponAppInit(e:FlexEvent):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.uponAppInit() [:_:]");
				
				_historyVO = new HistoryVO();
				
				this.flush();
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			private function uponAppCreation(event:FlexEvent):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.uponAppCreation("+event.toString()+") [:_:]");
				
				
				
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			private function uponStageAdoption(event:Event):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.uponStageAdoption("+event.toString()+") [:_:]");
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			private function hdlRadiusSlider_Change(e:Event):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.hdlRadiusSlider_Change("+e.toString()+") [:_:]");				
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			private function hdlMakePlistBtn_Click(e:MouseEvent):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.hdlMakePlistBtn_Click("+e.toString()+") [:_:]");
				
				txtPlistOutput.text = "";
				txtPlistOutput.text = this.genPlist().replace(/\t/g, "   ");
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			private function hdlCanvas_Click(e:MouseEvent):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.hdlCanvas_Click("+new Point(e.localX, e.localY)+") [:_:]");
				
				this.addNextPart(new Point(e.localX, e.localY));
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			private function hdlUndo_Click(e:MouseEvent):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.hdlUndo_Click() [:_:]");
				
				
				var actionVO:ActionVO = _historyVO.undo();
				var aPartVO:AbstractPartVO = actionVO.vo;
				var ui:IVisualElement = actionVO.vo.ui;
				
				var partVO:CircleVO;
				var clampVO:JointVO;
				
				switch (actionVO.type_str) {
					
					case EditorConsts.PART_ACTION:
						_bodyPartVO_arr.pop();
						ctnCanvas.removeElement(_bodyUI_arr.pop());
						
						break;
					
					case EditorConsts.CLAMP_ACTION:
						_clampVO_arr.pop();
						ctnCanvas.removeElement(_clampUI_arr.pop());
						break;
				}
				
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			private function hdlClearCanvas_Click(e:MouseEvent):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.hdlClearCanvas_Click() [:_:]");
				
				
				while (ctnCanvas.numElements > 0) {
					for (var i:Number=0; i<ctnCanvas.numElements; i++)
						ctnCanvas.removeElement(ctnCanvas.getElementAt(i) as IVisualElement);
				}
				
				this.flush();
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			private function hdlCloseGroup_Click(e:MouseEvent):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.hdlCloseGroup_Click() [:_:]");
				
				this.bindParts(this.findOccurance(CreatureConsts.CONTOUR_PART, true), this.findOccurance(CreatureConsts.CONTOUR_PART, false), (Math.random() * 62) + 2, Math.random());
				
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			private function hdlCanvasMouse_Move(e:MouseEvent):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.hdlCanvasMouse_Move("+new Point(e.localX, e.localY)+") [:_:]");
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			private function flush():void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.flush() [:_:]");
				
				_bodyPartVO_arr = new Array();
				_clampVO_arr = new Array();
				
				_bodyUI_arr = new Array();
				_clampUI_arr = new Array();
				
				_supportPart_tot = 0;
				_visceraPart_tot = 0;
				_contourPart_tot = 0;
				
				_historyVO.reset(0);
				
				
				_plist_str = "";
				txtPlistOutput.text = "";
				
				
				btnClearCanvas.enabled = false;
				btnCloseContours.enabled = false;
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			//trace ("\t~// ELEMENT @["+i+"]:"+(ctnCanvas.getElementAt(i) as IVisualElement));
			
			//*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*/
			
			private function hdlPartType_Change(e:ItemClickEvent):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.hdlPartType_Change("+rGrpPartTypes.selectedValue+") [:_:]");
				
				var type:int;
				
				switch (String(rGrpPartTypes.selectedValue)) {
					
					case CreatureConsts.SUPPORT_PART:
						type = 0;
						break;
					
					case CreatureConsts.VISCERAL_PART:
						type = 1;
						break;
					
					case CreatureConsts.CONTOUR_PART:
						type = 2;
						break;
				}
				
				_historyVO.stepSelect(type);
				
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			private function findOccurance(type:String, isFirst:Boolean=true):int {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.findOccurance("+isFirst+") [:_:]");
				
				
				var i:Number;
				var ind:int = 0;
				var vo:CircleVO;
				
				if (isFirst) {
					for (i=0; i<_bodyPartVO_arr.length; i++) {
						vo = _bodyPartVO_arr[i] as CircleVO;
						trace ("\t~//-> _bodyPartVO_arr["+i+"] = \'"+vo.type+"\'");
						
						if (vo.type == type) {
							ind = i;
							break;
						}
					}
				
				} else {
					for (i=_bodyPartVO_arr.length-1; i>=0; i--) {
						vo = _bodyPartVO_arr[i] as CircleVO;
						trace ("\t~//<- _bodyPartVO_arr["+i+"] = \'"+vo.type+"\'");
						
						if (vo.type == type) {
							ind = i;
							break;
						}
					}
				}
				
				
				return (ind);
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			//private function addBodyPart(type:String, coords:Point):void {
			private function addNextPart(coords:Point):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.addNextPart("+coords+" // {"+_historyVO.nextSelect_type+"}) [:_:]");
				
				var rad:int = sldRadius.value;
				var pos_pt:Point = coords.subtract(new Point(rad, rad));
				
				var vo:CircleVO;
				var dist:Number;
				
				// check for out of range
				if (_bodyPartVO_arr.length > 0) {
					vo = _bodyPartVO_arr[0] as CircleVO;
					dist = this.calcShortestDist(coords);
					
					//trace ("\t ~OOB// dist:["+dist+"] vs ["+((vo.radius+rad)+CreatureConsts.MAX_PART_DIST)+"]");
				
					// check for overlap
					for (var i:Number=0; i<_bodyPartVO_arr.length; i++) {
						vo = _bodyPartVO_arr[i] as CircleVO;
							
						//trace ("\t ~OVERLAP// ["+i+"] dist:["+Point.distance(coords, vo.pos_pt)+"] vs ["+(vo.radius+rad)+"]");
						if (dist < vo.radius + rad)
							return;
					}
				}
				
				var ellipse:Ellipse = new Ellipse();
					ellipse.stroke = new SolidColorStroke(CreatureConsts.PART_COLORS[_historyVO.nextSelect_type]);
					ellipse.fill = new SolidColor(CreatureConsts.PART_COLORS[_historyVO.nextSelect_type], 0.5);
					ellipse.x = pos_pt.x;
					ellipse.y = pos_pt.y;
					ellipse.width = rad * 2;
					ellipse.height = rad * 2;
				
				
				ctnCanvas.addElement(ellipse);
				_bodyUI_arr.push(ellipse);
				
				var partVO:CircleVO = new CircleVO(_bodyPartVO_arr.length, CreatureConsts.PART_NAMES[_historyVO.nextSelect_type], pos_pt.add(new Point(rad, rad)), rad, ellipse) 
				
				_bodyPartVO_arr.push(partVO);
				_historyVO.increment(EditorConsts.PART_ACTION, partVO);
				
				switch (CreatureConsts.PART_NAMES[_historyVO.nextSelect_type]) {
					
					case CreatureConsts.SUPPORT_PART:
						_supportPart_tot++;
						break;
					
					case CreatureConsts.VISCERAL_PART:
						_visceraPart_tot++;
						break;
					
					case CreatureConsts.CONTOUR_PART:
						_contourPart_tot++;
						break;
				}
				
				btnCloseContours.enabled = (_contourPart_tot > 2);
				
				
				
				trace ("\t~// Added \'\'"+CreatureConsts.PART_NAMES[_historyVO.nextSelect_type]+"\'\' #"+(_bodyPartVO_arr.length-1)+" @ "+pos_pt);
				
				
				// there's at least two parts
				if (_bodyPartVO_arr.length > 1) {
					
					
					// connect the previous w/ new one when the same
					//if (_historyVO.getAction(1).vo.type == _historyVO.getAction(2).vo.type) {
						this.bindParts(_bodyPartVO_arr.length-1, _bodyPartVO_arr.length-2, (Math.random() * 62) + 2, Math.random());
					//}
						
					// created a contour part
					if (CreatureConsts.PART_NAMES[_historyVO.nextSelect_type] == CreatureConsts.CONTOUR_PART) {
						var supportVO:CircleVO = this.findNearestSupport(partVO);
						
						trace ("\t~// Nearest support for :"+(supportVO.pos_pt)+": // ind:["+supportVO.ind+"]");
						this.bindParts(_bodyPartVO_arr.length-1, supportVO.ind, (Math.random() * 62) + 2, Math.random());
					}
				}
				
				
				btnClearCanvas.enabled = _bodyPartVO_arr.length > 0;
				
							
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			private function findNearestSupport(from_vo:CircleVO):CircleVO {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.findNearestSupport("+from_vo.pos_pt+") [:_:]");
				
				var lowest_ind:int = 0;
				var tst_vo:CircleVO = _bodyPartVO_arr[lowest_ind] as CircleVO;
				var lowest_dist:int = Point.distance(from_vo.pos_pt, tst_vo.pos_pt);
				
				
				
				for (var i:Number=0; i<_bodyPartVO_arr.length-1; i++) {
					
					//if (i != exclude || exclude == -1) {
					tst_vo = _bodyPartVO_arr[i] as CircleVO;
					var tst_dist:Number = Point.distance(from_vo.pos_pt, tst_vo.pos_pt);
						
					trace ("\t~// CHECKING DISTANCE w/ _bodyPartVO_arr["+i+"]|: (lowest_dist:["+lowest_dist+"] TST:["+tst_dist+"])");
						
						
					if (tst_dist < lowest_dist) {
						lowest_ind = i;
						lowest_dist = tst_dist;
					}
				}
				
				
				return (_bodyPartVO_arr[lowest_ind] as CircleVO);
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			private function calcShortestDist(pos:Point):Number {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.calcShortestDist("+pos+") [:_:]");
				
				var test_vo:CircleVO = _bodyPartVO_arr[0] as CircleVO;
				var lowest:Number = Point.distance(pos, test_vo.pos_pt);
				
				for (var i:Number=1; i<_bodyPartVO_arr.length; i++) {
					test_vo = _bodyPartVO_arr[i] as CircleVO;
					
					var test:Number = Point.distance(pos, test_vo.pos_pt);
					
					trace ("\t~// CHECKING DISTANCE--> (TEST:["+test+"] LOWEST:["+lowest+"] {"+(test < lowest)+"})");
					
					if (test <= lowest)
						lowest = test;
				}
				
				
				return (lowest);
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			
			private function bindParts(ind1:int, ind2:int, strength:Number, damping:Number):void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.bindParts("+ind1+", "+ind2+" // ["+strength+", "+damping+"]) [:_:]");
				
				var pos1_pt:Point = (_bodyPartVO_arr[ind1] as CircleVO).pos_pt;
				var pos2_pt:Point = (_bodyPartVO_arr[ind2] as CircleVO).pos_pt;
				
				var ang:Number = Number(Angle.radiansToDegrees(Math.atan2(pos2_pt.y - pos1_pt.y, pos2_pt.x - pos1_pt.x)).toFixed(4));
				
				var line:Line = new Line();
					line.stroke = new SolidColorStroke(0xff0000);
					line.width = Point.distance(pos1_pt, pos2_pt);
					line.x = pos1_pt.x;
					line.y = pos1_pt.y;
					line.rotation = ang;
				
				var clampVO:JointVO = new JointVO(_clampVO_arr.length, CreatureConsts.SPRING_CLAMP, ind1, ind2, new Point(), new Point(), strength, damping, line)
					
				_clampVO_arr.push(clampVO);
				_clampUI_arr.push(line);
				
				ctnCanvas.addElement(line);
				
				_historyVO.increment(EditorConsts.CLAMP_ACTION, clampVO);
				
				trace ("\t~// Added clamp #"+(_clampVO_arr.length-1)+" L:"+Number(Point.distance(pos1_pt, pos2_pt).toFixed(4))+" A:"+ang);
				
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			public function genPlist():String {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.writePlist() [:_:]");
				
				_plist_str += PlistConsts.FILE_HEADER;
				_plist_str += this.writeCircles();
				_plist_str += this.writeJoints();
				_plist_str += PlistConsts.FILE_FOOTER;
				
				
				return (_plist_str);
				
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			
			private function writeCircles():String {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.writeCircles("+(_bodyPartVO_arr[0].length + _bodyPartVO_arr[1].length + _bodyPartVO_arr[2].length)+") [:_:]");
				
				var str:String = PlistConsts.CIRCLE_PREGRP;
				var vo_arr:Array;
				var vo:CircleVO;
				
				for (var i:Number=0; i<_bodyPartVO_arr.length; i++) {
					vo_arr = _bodyPartVO_arr[i] as Array;
					
					for (var j:int=0; j<vo_arr.length; j++) {
						vo = vo_arr[j] as CircleVO;
						
						str += PlistConsts.CIRCLE_PRETAG + String(vo.ind);
						str += PlistConsts.CIRCLE_TYPE + String(vo.type);
						str += PlistConsts.CIRCLE_POS_X + String(vo.pos_pt.x);
						str += PlistConsts.CIRCLE_POS_Y + String(vo.pos_pt.y);
						str += PlistConsts.CIRCLE_RADIUS + String(vo.radius);
						str += PlistConsts.CIRCLE_POSTTAG;
					}
				}
				
				return (str + PlistConsts.CIRCLE_POSTGRP);
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			
			private function writeJoints():String {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.writeJoints("+_clampVO_arr.length+") [:_:]");
				
				var str:String = PlistConsts.CLAMP_PREGRP;
				var vo:JointVO;
				
				for (var i:Number=0; i<_clampVO_arr.length; i++) {
					vo = _clampVO_arr[i] as JointVO;
					
					str += PlistConsts.CLAMP_PRETAG + String(vo.ind);
					str += PlistConsts.CLAMP_BODY_A + String(vo.bodyA);
					str += PlistConsts.CLAMP_BODY_B + String(vo.bodyB);
					str += PlistConsts.CLAMP_STR + String(vo.str);
					str += PlistConsts.CLAMP_DMP + String(vo.dmp);
					str += PlistConsts.CLAMP_POSTTAG;
				}
				
				return (str + PlistConsts.CLAMP_POSTGRP);
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			
			
			private function dummyPopulate():void {
			//~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~~*~._
				trace ("[:_:] Application.dummyPopulate() [:_:]");
				
				var i:Number;
				var sup_amt:int = 1;
				var vis_amt:int = 4;
				var con_amt:int = 16;
				
				for (i=0; i<sup_amt; i++)
					(_bodyPartVO_arr[0] as Array).push(new CircleVO(i, CreatureConsts.SUPPORT_PART, new Point(i, i), ((Math.random() * 62) << 0) + 2));
				
				for (i=0; i<vis_amt; i++)
					(_bodyPartVO_arr[1] as Array).push(new CircleVO(i, CreatureConsts.VISCERAL_PART, new Point(i, i), ((Math.random() * 62) << 0) + 2));
				
				for (i=0; i<con_amt; i++)
					(_bodyPartVO_arr[2] as Array).push(new CircleVO(i, CreatureConsts.CONTOUR_PART, new Point(i, i), ((Math.random() * 62) << 0) + 2));
				
				
				for (i=0; i<con_amt; i++)
					_clampVO_arr.push(new JointVO(i, CreatureConsts.SPRING_CLAMP, i, (i % 9), new Point(), new Point(), (Math.random() * 62) + 2, Math.random()));
				
				
				
				
			}//]~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			
			
			//*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~·¯
			//*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*·¯
		]]>
	</fx:Script>
	<!-- /////////////////////////////// -->
	
	
	<!-- -=[ OUTPUT UI ]=- -->
	<!-- =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
	<s:Panel id="pnlRoot" title="GUTZ Creature Builder" width="100%" height="100%">
		<s:Group> <!-- width="100%" height="100%"> -->
			<s:Panel id="pnlTools" title="—Tools—" x="{ComponentConsts.APP_PADDING_L}" y="{ComponentConsts.APP_PADDING_T}" width="128" height="480">
				<s:Group id="grpTools">
					<s:BorderContainer id="grpVisceraBtns" x="4" y="4" width="112" height="64" borderAlpha="0.2">
						<s:Label id="lblVisceraType" x="4" y="4" text="Type:" />
						<s:RadioButton group="{rGrpPartTypes}" id="radSupport" value="{CreatureConsts.SUPPORT_PART}" x="4" y="20" label="Support" width="128" useHandCursor="true" selected="true" />
						<!--<s:RadioButton group="{rGrpPartTypes}" id="radVisceral" value="{CreatureConsts.VISCERAL_PART}" x="4" y="36" label="Visceral" width="128" useHandCursor="true" />-->
						<s:RadioButton group="{rGrpPartTypes}" id="radContour" value="{CreatureConsts.CONTOUR_PART}" x="4" y="36" label="Contour" width="128" useHandCursor="true" />	
					</s:BorderContainer>
					
					<s:Label id="lblPartRadius" x="4" y="80" text="Radius: {sldRadius.value}" />
					<s:HSlider id="sldRadius" x="4" y="96" minimum="1" maximum="32" value="8" stepSize="1" snapInterval="1" liveDragging="true" useHandCursor="true" change="hdlRadiusSlider_Change(event)" />
					<s:Button id="btnMakePlist" x="24" y="320" width="80" height="64" label="Make Plist" click="hdlMakePlistBtn_Click(event)" />
				</s:Group>
			</s:Panel>
			
			<s:Group id="grpCanvas" x="160" y="{ComponentConsts.APP_PADDING_T}">
				
				<s:Group id="grpSVG" x="160" y="240">
					<s:Graphic>
						<s:Path data="M52.21582,103.6748c2.89551,4.3252,3.95996,10.22461,2.65039,16.12305
								c3.93262,4.88281,2.3584,12.94336-0.66309,17.88867c4.28516,10.0791-7.91602,16.60938-2.42969,25.17676
								c1.53906,2.40234,5.66602,3.33203,6.18457,7.06738c0.41309,2.98145-0.82812,6.25293-3.75488,7.95117
								c-3.44922-0.11914-6.0752-0.37891-8.39258-1.9873c-1.67578-1.16406-2.4707-2.96484-3.9751-3.75488
								c-2.23828-1.1748-4.5127-0.89941-6.40479-2.42969c-3.1377-2.53809-3.91406-6.9248-2.4292-11.26367
								c0.37402-1.0918,1.58838-2.54785,1.5459-3.75391c-0.05908-1.67578-2.39258-3.69824-2.65039-5.96289
								c-0.3916-3.44238,1.33301-5.76465,2.65039-8.83398c-4.54932-3.31641-7.03418-11.27441-4.85889-18.11035
								c-4.27051-4.17676-7.42773-12.62793-3.9751-19.65625c-1.90625-3.74756-1.09717-11.15869,0.8833-14.79688
								c-3.89453-2.65479-6.3374-10.43115-2.42969-14.79688c-1.81738-3.20654-1.81592-9.69531,0.6626-12.14697
								c-3.22803-4.18555-5.76758-13.64209-1.32471-18.10986c-3.89453-3.20068-9.18115-12.73877-3.97559-17.88916
								c2.69385-2.66504,8.85596-3.43506,12.36768-0.6626c1.41406,1.11621,3.22607,3.65625,4.19629,5.52148
								c1.75146,3.36572,0.48682,6.79443,1.5459,9.93799c0.46094,1.36865,1.81592,1.95361,2.2085,3.75488
								c6.43164,0.79248,11.76465,6.22021,10.82227,13.69287c-0.14355,1.13525-1.0332,2.47314-0.88379,3.5332
								c0.28027,1.98145,3.47949,3.87061,4.41699,5.52148c2.12012,3.73145,3.38672,9.57324,2.42969,14.13477
								c-0.28516,1.35596-1.77734,3.05908-1.7666,4.8584c0.00684,1.32275,1.15918,2.85742,1.3252,4.19629
								C56.87207,94.39355,54.78027,99.021,52.21582,103.6748z M26.59668,23.72656c-6.74707-0.92285-7.39355,7.82275-5.52148,12.14697
								c0.86182,1.98975,4.9751,4.3877,5.07959,5.74219c0.08838,1.14502-1.12988,1.53662-1.7666,2.4292
								c-0.84961,1.19043-1.58789,3.61475-1.5459,5.74219c0.10498,5.33008,3.33057,7.39648,4.6377,11.04248
								c-4.52588,2.00098-3.07227,9.8252-0.6626,13.03076c-0.83301,0.7627-0.80615,1.04004-1.7666,1.5459
								c-1.48242,3.06152-0.75635,6.48877,0.8833,9.05469c1.21289,1.29004,3.51318,1.49268,3.9751,3.53369
								c-2.36133,2.22021-4.1499,4.73877-3.75439,9.27588c0.42529,4.87988,5.43701,9.14062,1.10449,8.83398
								c-0.54834,5.22949,0.44043,10.32422,3.0918,13.25098c0.96924,1.07031,2.89551,1.39746,2.65039,3.0918
								c-0.44775,1.07422-1.73779-0.00781-1.76709,0.66309c-1.78662,5.83008,0.28662,12.95801,4.63818,14.79688
								c0.55664-0.32617,0.7168-1.0498,1.7666-0.88281c0.46582,3.375-2.0249,5.31738-2.4292,8.61328
								c-0.49219,4.00781,1.02539,5.08008,1.7666,7.72949c0.37988,1.35645-2.50146,5.61719-2.87109,7.72949
								c-1.30762,7.47949,5.98633,7.67969,10.82227,10.60156c1.05273,3.58691,6.68457,4.43164,9.93848,3.3125
								c2.28027-2.94531,1.42773-6.14355-0.66309-7.95117c-2.06348-1.78223-4.56934-2.76367-5.52148-5.52051
								c-2.8877-8.36328,5.64453-11.54688,4.19629-21.20215c-0.92969,0.1748-1.27051,1.86719-2.42871,1.10449
								c0.06836-2.00488,2.06543-3.5293,3.0918-5.74219c1.65137-3.56152,2.91309-9.37988,0.88281-13.03027
								c-0.67383-0.65039-1.04688,1.3584-1.9873,0.44141c1.57129-5.34375,2.05957-13.49121-1.5459-17.44727
								c-0.74316-0.01953-1.76855,1.0625-2.20898,0c2.28906-5.2627,7.67188-10.9873,5.08008-18.33105
								c-0.72559,0.1665-1.28613,1.64746-2.20898,0.8833c0.50488-2.79297,2.50977-5.76367,2.87109-9.49658
								c0.63477-6.55615-1.88281-12.31641-5.2998-15.45947c-0.77148,0.1123-0.74902,1.01807-1.98828,0.6626
								c-0.21582-2.35498,1.13086-4.20166,1.3252-6.62598c0.49707-6.18018-2.83301-10.72559-7.50879-12.36768
								c-0.73389,0.17871-0.63721,2.01807-1.5459,1.3252c-1.0791-2.60205-2.49805-4.86426-5.07959-5.96289c0-0.2207,0-0.44189,0-0.6626
								c0.021-0.64453,0.89209-0.21582,1.32471-0.8833C36.25732,31.70117,32.28076,24.50391,26.59668,23.72656z">
							<s:fill><s:SolidColor color="0x000000"/></s:fill>
						</s:Path>
					</s:Graphic>
					
					
					<s:Graphic>
						<s:Path data="M35.65137,38.74463
								c-0.43262,0.66748-1.30371,0.23877-1.32471,0.8833c0,0.2207,0,0.44189,0,0.6626c2.58154,1.09863,4.00049,3.36084,5.07959,5.96289
								c0.90869,0.69287,0.81201-1.14648,1.5459-1.3252c4.67578,1.64209,8.00586,6.1875,7.50879,12.36768
								c-0.19434,2.42432-1.54102,4.271-1.3252,6.62598c1.23926,0.35547,1.2168-0.55029,1.98828-0.6626
								c3.41699,3.14307,5.93457,8.90332,5.2998,15.45947c-0.36133,3.73291-2.36621,6.70361-2.87109,9.49658
								c0.92285,0.76416,1.4834-0.7168,2.20898-0.8833c2.5918,7.34375-2.79102,13.06836-5.08008,18.33105
								c0.44043,1.0625,1.46582-0.01953,2.20898,0c3.60547,3.95605,3.11719,12.10352,1.5459,17.44727
								c0.94043,0.91699,1.31348-1.0918,1.9873-0.44141c2.03027,3.65039,0.76855,9.46875-0.88281,13.03027
								c-1.02637,2.21289-3.02344,3.7373-3.0918,5.74219c1.1582,0.7627,1.49902-0.92969,2.42871-1.10449
								c1.44824,9.65527-7.08398,12.83887-4.19629,21.20215c0.95215,2.75684,3.45801,3.73828,5.52148,5.52051
								c2.09082,1.80762,2.94336,5.00586,0.66309,7.95117c-3.25391,1.11914-8.88574,0.27441-9.93848-3.3125
								c-4.83594-2.92188-12.12988-3.12207-10.82227-10.60156c0.36963-2.1123,3.25098-6.37305,2.87109-7.72949
								c-0.74121-2.64941-2.25879-3.72168-1.7666-7.72949c0.4043-3.2959,2.89502-5.23828,2.4292-8.61328
								c-1.0498-0.16699-1.20996,0.55664-1.7666,0.88281c-4.35156-1.83887-6.4248-8.9668-4.63818-14.79688
								c0.0293-0.6709,1.31934,0.41113,1.76709-0.66309c0.24512-1.69434-1.68115-2.02148-2.65039-3.0918
								c-2.65137-2.92676-3.64014-8.02148-3.0918-13.25098c4.33252,0.30664-0.6792-3.9541-1.10449-8.83398
								c-0.39551-4.53711,1.39307-7.05566,3.75439-9.27588c-0.46191-2.04102-2.76221-2.24365-3.9751-3.53369
								c-1.63965-2.56592-2.36572-5.99316-0.8833-9.05469c0.96045-0.50586,0.93359-0.7832,1.7666-1.5459
								c-2.40967-3.20557-3.86328-11.02979,0.6626-13.03076c-1.30713-3.646-4.53271-5.7124-4.6377-11.04248
								c-0.04199-2.12744,0.69629-4.55176,1.5459-5.74219c0.63672-0.89258,1.85498-1.28418,1.7666-2.4292
								c-0.10449-1.35449-4.21777-3.75244-5.07959-5.74219c-1.87207-4.32422-1.22559-13.06982,5.52148-12.14697
								C32.28076,24.50391,36.25732,31.70117,35.65137,38.74463z">
							<s:fill><s:SolidColor color="0x00ffff"/></s:fill>
						</s:Path>
					</s:Graphic>
				</s:Group>
				
				<s:BorderContainer id="ctnCanvas" width="320" height="480" click="hdlCanvas_Click(event)" />
				<s:HGroup y="480">
					<s:Button id="btnCloseContours" label="Close Contours" y="{ComponentConsts.APP_PADDING_T}" width="128" height="32" click="hdlCloseGroup_Click(event)" enabled="false" />
					<s:Button id="btnUndo" label="Undo" y="{ComponentConsts.APP_PADDING_T}" width="128" height="32" click="hdlUndo_Click(event)" enabled="false" />
					<s:Button id="btnClearCanvas" label="Clear Canvas" y="{ComponentConsts.APP_PADDING_T}" width="128" height="32" click="hdlClearCanvas_Click(event)" enabled="false" />
				</s:HGroup>
			</s:Group>
			
			
			<s:TextArea id="txtPlistOutput" x="496" y="{ComponentConsts.APP_PADDING_T}" width="284" height="480" contentBackgroundColor="#e8e7cf" color="#1c0b22" lineBreak="explicit" editable="false"  />
		</s:Group>
		
		
		
		
		
		<s:Group id="grpDebug" x="400" y="0" width="200" height="200" visible="false">
			<s:TextArea id="txtDebug" contentBackgroundColor="#1f2731" color="#9a987c" />
		</s:Group>
	</s:Panel>
	<!-- /////////////////////////////// -->
	
</s:WindowedApplication>
<!-- -=[ END OF APPLICATION UI ]=- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->